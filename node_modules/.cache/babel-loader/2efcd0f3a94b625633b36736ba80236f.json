{"ast":null,"code":"var _jsxFileName = \"/home/devugees/Desktop/react/react_users_sql_1.3.0/src/layouts/TextInputGroup.js\";\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames'; // JSX\n// import { Consumer } from '../Context';\n\n/* Stateless component that works as a layout for input representation.\n   It can be used for the user creation and/or for the user edition.\n   Basically works like a function that receives its parameters and \n   returns a div as a form representation with the each parameter on\n   the right place.\n*/\n\nvar TextInputGroup = function TextInputGroup(_ref) {\n  var label = _ref.label,\n      name = _ref.name,\n      value = _ref.value,\n      placeholder = _ref.placeholder,\n      type = _ref.type,\n      onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue,\n      error = _ref.error;\n  return React.createElement(\"div\", {\n    className: \"form-group mt-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, label), React.createElement(\"input\", {\n    type: type,\n    label: label,\n    className: classnames('form-control form-control-lg', {\n      'is-invalid': error\n    }),\n    name: name,\n    value: value,\n    placeholder: placeholder,\n    onChange: onChange,\n    defaultValue: defaultValue,\n    invalid: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), error && React.createElement(\"div\", {\n    className: \"invalid-feedback d-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, error)));\n}; // This block forces the information insertion.\n// Spefifically it makes sure that no input field is empty\n\n\nTextInputGroup.propTypes = {\n  label: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  type: propTypes.string.isRequired,\n  value: propTypes.string.isRequired,\n  onChange: propTypes.func.isRequired,\n  error: propTypes.string\n};\n/* \n  If we are using only one single default type,\n  we can use this.\nTextInputGroup.defaultProps = {\n  type: \"text\"\n}\n\n*/\n\nexport default TextInputGroup;","map":{"version":3,"sources":["/home/devugees/Desktop/react/react_users_sql_1.3.0/src/layouts/TextInputGroup.js"],"names":["React","propTypes","classnames","TextInputGroup","label","name","value","placeholder","type","onChange","defaultValue","error","string","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;AAEA;;AAEA;;;;;;;AAMA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OASjB;AAAA,MARJC,KAQI,QARJA,KAQI;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,MANJC,KAMI,QANJA,KAMI;AAAA,MALJC,WAKI,QALJA,WAKI;AAAA,MAJJC,IAII,QAJJA,IAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,YAEI,QAFJA,YAEI;AAAA,MADJC,KACI,QADJA,KACI;AACJ,SACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAEN,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBD,KAAvB,CADF,EAEE;AACE,IAAA,IAAI,EAAEI,IADR;AAEE,IAAA,KAAK,EAAEJ,KAFT;AAGE,IAAA,SAAS,EAAEF,UAAU,CAAC,8BAAD,EAAiC;AACpD,oBAAcS;AADsC,KAAjC,CAHvB;AAME,IAAA,IAAI,EAAEN,IANR;AAOE,IAAA,KAAK,EAAEC,KAPT;AAQE,IAAA,WAAW,EAAEC,WARf;AASE,IAAA,QAAQ,EAAEE,QATZ;AAUE,IAAA,YAAY,EAAEC,YAVhB;AAWE,IAAA,OAAO,EAAC,MAXV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAgBGC,KAAK,IAAI;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2CA,KAA3C,CAhBZ,CADF,CADF;AAsBD,CAhCD,C,CAkCA;AACA;;;AACAR,cAAc,CAACF,SAAf,GAA2B;AACzBG,EAAAA,KAAK,EAAEH,SAAS,CAACW,MAAV,CAAiBC,UADC;AAEzBR,EAAAA,IAAI,EAAEJ,SAAS,CAACW,MAAV,CAAiBC,UAFE;AAGzBL,EAAAA,IAAI,EAAEP,SAAS,CAACW,MAAV,CAAiBC,UAHE;AAIzBP,EAAAA,KAAK,EAAEL,SAAS,CAACW,MAAV,CAAiBC,UAJC;AAKzBJ,EAAAA,QAAQ,EAAER,SAAS,CAACa,IAAV,CAAeD,UALA;AAMzBF,EAAAA,KAAK,EAAEV,SAAS,CAACW;AANQ,CAA3B;AASA;;;;;;;;;AASA,eAAeT,cAAf","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\n// JSX\n\n// import { Consumer } from '../Context';\n\n/* Stateless component that works as a layout for input representation.\n   It can be used for the user creation and/or for the user edition.\n   Basically works like a function that receives its parameters and \n   returns a div as a form representation with the each parameter on\n   the right place.\n*/\nconst TextInputGroup = ({\n  label,\n  name,\n  value,\n  placeholder,\n  type,\n  onChange,\n  defaultValue,\n  error\n}) => {\n  return (\n    <div className=\"form-group mt-3\">\n      <div className=\"form-group\">\n        <label htmlFor={name}>{label}</label>\n        <input\n          type={type}\n          label={label}\n          className={classnames('form-control form-control-lg', {\n            'is-invalid': error\n          })}\n          name={name}\n          value={value}\n          placeholder={placeholder}\n          onChange={onChange}\n          defaultValue={defaultValue}\n          invalid=\"true\"\n        />\n        {/* This is to show any error message if occurs. */}\n        {error && <div className=\"invalid-feedback d-block\">{error}</div>}\n      </div>\n    </div>\n  );\n};\n\n// This block forces the information insertion.\n// Spefifically it makes sure that no input field is empty\nTextInputGroup.propTypes = {\n  label: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  type: propTypes.string.isRequired,\n  value: propTypes.string.isRequired,\n  onChange: propTypes.func.isRequired,\n  error: propTypes.string\n};\n\n/* \n  If we are using only one single default type,\n  we can use this.\nTextInputGroup.defaultProps = {\n  type: \"text\"\n}\n\n*/\n\nexport default TextInputGroup;\n"]},"metadata":{},"sourceType":"module"}
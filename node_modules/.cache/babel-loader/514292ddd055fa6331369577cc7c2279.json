{"ast":null,"code":"import _defineProperty from \"/home/devugees/Desktop/react/react_users_sql/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/devugees/Desktop/react/react_users_sql/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devugees/Desktop/react/react_users_sql/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devugees/Desktop/react/react_users_sql/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devugees/Desktop/react/react_users_sql/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devugees/Desktop/react/react_users_sql/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devugees/Desktop/react/react_users_sql/src/components/AddUser.js\";\nimport React, { Component } from 'react'; // JSX\n\nimport TextInputGroup from '../layouts/TextInputGroup';\nimport Axios from 'axios';\n/* Stateful component that deals with the insertion of the user information, so\nit can be inserted on the database. */\n\nvar AddContact =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddContact, _Component);\n\n  function AddContact(props) {\n    var _this;\n\n    _classCallCheck(this, AddContact);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddContact).call(this, props));\n    _this.state = {\n      name: ' ',\n      email: ' ',\n      city: '',\n      phone: ' ',\n      website: '',\n      id: 0,\n      errors: {}\n    };\n\n    _this.updateInformation = function (event) {\n      event.preventDefault(); // Prevents page from reload\n\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.handleNewContact = function (event) {\n      // event.preventDefault(); // Prevents page from reload\n      // A random value created to be store on the database\n      var newId = Math.floor(Math.random(10) * 10000); // Assigning the objects of the state to this set of objects\n\n      var _this$state = _this.state,\n          name = _this$state.name,\n          email = _this$state.email,\n          city = _this$state.city,\n          phone = _this$state.phone,\n          website = _this$state.website; // Test to make shore no object (that is going to be sent to the server) is empty\n\n      if (name === ' ') {\n        _this.setState({\n          errors: {\n            name: 'Name is required'\n          }\n        });\n\n        return;\n      }\n\n      if (email === ' ') {\n        _this.setState({\n          errors: {\n            email: 'Email is required'\n          }\n        });\n\n        return;\n      }\n\n      if (city === ' ') {\n        _this.setState({\n          errors: {\n            city: 'City is required'\n          }\n        });\n\n        return;\n      }\n\n      if (phone === ' ') {\n        _this.setState({\n          errors: {\n            phone: 'Phone is required'\n          }\n        });\n\n        return;\n      }\n\n      if (website === ' ') {\n        _this.setState({\n          errors: {\n            website: 'Please write a website'\n          }\n        });\n\n        return;\n      } // Creation of an object with the name \"Person\"\n\n\n      var Person = {\n        name: name,\n        email: email,\n        city: city,\n        phone: phone,\n        website: website,\n        id: newId,\n        errors: {}\n      }; // This is where the request is made. It's a post request, since the\n      // information has to be store on the database.\n\n      Axios.post(\"http://localhost:1024/newuser\", Person).then(function (response) {\n        // If the operation was successful, the alert is shown to the user\n        alert('User successfully added.');\n\n        _this.props.history.push('/'); // Keeping the previous page (in case the user\n        // wants to go back)\n\n      });\n    };\n\n    _this.nameInput = React.createRef();\n    _this.emailInput = React.createRef();\n    _this.cityInput = React.createRef();\n    _this.phoneInput = React.createRef();\n    _this.websiteInput = React.createRef();\n    _this.idInput = React.createRef();\n    return _this;\n  } // Objects to store the information when inserted by the user.\n\n\n  _createClass(AddContact, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"Add-Contact-Form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(TextInputGroup, {\n        type: \"text\",\n        label: \"Name\",\n        className: \"name form-control\",\n        name: \"name\" // This is value that must macth the identification of the object store in state.\n        ,\n        placeholder: \"Enter name\",\n        onChange: this.updateInformation // This calls the function that stores what the user writes on the object store in state.\n        ,\n        error: this.state.errors.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(TextInputGroup, {\n        type: \"email\",\n        label: \"Email\",\n        className: \"email form-control\",\n        name: \"email\" // This is value that must macth the identification of the object store in state.\n        ,\n        placeholder: \"Enter email\",\n        onChange: this.updateInformation // This calls the function that stores what the user writes on the object store in state.\n        ,\n        error: this.state.errors.email,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"small\", {\n        id: \"emailHelp\",\n        className: \"form-text text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"We'll never share your email with anyone else.\"), React.createElement(TextInputGroup, {\n        type: \"text\",\n        label: \"City\",\n        className: \"city form-control\",\n        name: \"city\" // This is value that must macth the identification of the object store in state.\n        ,\n        placeholder: \"Enter city name\",\n        onChange: this.updateInformation // This calls the function that stores what the user writes on the object store in state.\n        ,\n        error: this.state.errors.city,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(TextInputGroup, {\n        type: \"text\",\n        label: \"Phone\",\n        className: \"phone form-control\",\n        name: \"phone\" // This is value that must macth the identification of the object store in state.\n        ,\n        placeholder: \"Enter phone\",\n        onChange: this.updateInformation // This calls the function that stores what the user writes on the object store in state.\n        ,\n        error: this.state.errors.phone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), ' ', React.createElement(\"small\", {\n        id: \"emailHelp\",\n        className: \"form-text text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"We'll never share your phone with anyone else.\"), React.createElement(TextInputGroup, {\n        type: \"text\",\n        label: \"Website\",\n        className: \"website form-control\",\n        name: \"website\" // This is value that must macth the identification of the object store in state.\n        ,\n        placeholder: \"Enter website\",\n        onChange: this.updateInformation // This calls the function that stores what the user writes on the object store in state.\n        ,\n        error: this.state.errors.website,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), ' ', React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        onClick: function onClick() {\n          return _this2.handleNewContact();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Add Contact\", ' '));\n    }\n  }]);\n\n  return AddContact;\n}(Component);\n\nexport default AddContact;","map":{"version":3,"sources":["/home/devugees/Desktop/react/react_users_sql/src/components/AddUser.js"],"names":["React","Component","TextInputGroup","Axios","AddContact","props","state","name","email","city","phone","website","id","errors","updateInformation","event","preventDefault","setState","target","value","handleNewContact","newId","Math","floor","random","Person","post","then","response","alert","history","push","nameInput","createRef","emailInput","cityInput","phoneInput","websiteInput","idInput"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n// JSX\n\nimport TextInputGroup from '../layouts/TextInputGroup';\nimport Axios from 'axios';\n/* Stateful component that deals with the insertion of the user information, so\nit can be inserted on the database. */\nclass AddContact extends Component {\n  constructor(props) {\n    super(props);\n\n    this.nameInput = React.createRef();\n    this.emailInput = React.createRef();\n    this.cityInput = React.createRef();\n    this.phoneInput = React.createRef();\n    this.websiteInput = React.createRef();\n    this.idInput = React.createRef();\n  }\n\n  // Objects to store the information when inserted by the user.\n  state = {\n    name: ' ',\n    email: ' ',\n    city: '',\n    phone: ' ',\n    website: '',\n    id: 0,\n    errors: {}\n  };\n\n  /* This function stores what the user writes in the input field.\n     For each input field, the information is store on the object of the\n     \"state\". This is done by the corresponding identification. That's why\n     every input field has the \"name\" tag. The value of this tag must match\n     the same name of the object belonging to \"state\". That way the value of the\n     input is stored character by character.\n  */\n  updateInformation = event => {\n    event.preventDefault(); // Prevents page from reload\n\n    this.setState({\n      // While the first matches the specific object on state,\n      // the second one assigns the value to the object.\n      [event.target.name]: event.target.value\n    });\n  };\n\n  // This function handles the creation of the new user (on the front end side)\n  handleNewContact = event => {\n    // event.preventDefault(); // Prevents page from reload\n\n    // A random value created to be store on the database\n    const newId = Math.floor(Math.random(10) * 10000);\n\n    // Assigning the objects of the state to this set of objects\n    const { name, email, city, phone, website } = this.state;\n\n    // Test to make shore no object (that is going to be sent to the server) is empty\n    if (name === ' ') {\n      this.setState({\n        errors: { name: 'Name is required' }\n      });\n      return;\n    }\n    if (email === ' ') {\n      this.setState({\n        errors: { email: 'Email is required' }\n      });\n      return;\n    }\n    if (city === ' ') {\n      this.setState({\n        errors: { city: 'City is required' }\n      });\n      return;\n    }\n    if (phone === ' ') {\n      this.setState({\n        errors: { phone: 'Phone is required' }\n      });\n      return;\n    }\n    if (website === ' ') {\n      this.setState({\n        errors: { website: 'Please write a website' }\n      });\n      return;\n    }\n\n    // Creation of an object with the name \"Person\"\n    const Person = {\n      name: name,\n      email: email,\n      city: city,\n      phone: phone,\n      website: website,\n      id: newId,\n      errors: {}\n    };\n\n    // This is where the request is made. It's a post request, since the\n    // information has to be store on the database.\n    Axios.post(`http://localhost:1024/newuser`, Person).then(response => {\n      // If the operation was successful, the alert is shown to the user\n      alert('User successfully added.');\n      this.props.history.push('/'); // Keeping the previous page (in case the user\n      // wants to go back)\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Add-Contact-Form\">\n        <TextInputGroup\n          type=\"text\"\n          label=\"Name\"\n          className=\"name form-control\"\n          name=\"name\" // This is value that must macth the identification of the object store in state.\n          placeholder=\"Enter name\"\n          onChange={this.updateInformation} // This calls the function that stores what the user writes on the object store in state.\n          error={this.state.errors.name}\n        />\n        <TextInputGroup\n          type=\"email\"\n          label=\"Email\"\n          className=\"email form-control\"\n          name=\"email\" // This is value that must macth the identification of the object store in state.\n          placeholder=\"Enter email\"\n          onChange={this.updateInformation} // This calls the function that stores what the user writes on the object store in state.\n          error={this.state.errors.email}\n        />\n        <small id=\"emailHelp\" className=\"form-text text-muted\">\n          We'll never share your email with anyone else.\n        </small>\n        <TextInputGroup\n          type=\"text\"\n          label=\"City\"\n          className=\"city form-control\"\n          name=\"city\" // This is value that must macth the identification of the object store in state.\n          placeholder=\"Enter city name\"\n          onChange={this.updateInformation} // This calls the function that stores what the user writes on the object store in state.\n          error={this.state.errors.city}\n        />\n        <TextInputGroup\n          type=\"text\"\n          label=\"Phone\"\n          className=\"phone form-control\"\n          name=\"phone\" // This is value that must macth the identification of the object store in state.\n          placeholder=\"Enter phone\"\n          onChange={this.updateInformation} // This calls the function that stores what the user writes on the object store in state.\n          error={this.state.errors.phone}\n        />{' '}\n        <small id=\"emailHelp\" className=\"form-text text-muted\">\n          We'll never share your phone with anyone else.\n        </small>\n        <TextInputGroup\n          type=\"text\"\n          label=\"Website\"\n          className=\"website form-control\"\n          name=\"website\" // This is value that must macth the identification of the object store in state.\n          placeholder=\"Enter website\"\n          onChange={this.updateInformation} // This calls the function that stores what the user writes on the object store in state.\n          error={this.state.errors.website}\n        />{' '}\n        {/* This button call the function to handle the user creation.\n            The two ways to do this are with the use of bind (as \"this.handleNewContact.bind()\") or by the use of arrow function\n            like it is written bellow.\n        */}\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          onClick={() => this.handleNewContact()}\n        >\n          Add Contact{' '}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default AddContact;\n"]},"metadata":{},"sourceType":"module"}
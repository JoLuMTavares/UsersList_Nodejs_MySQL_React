{"ast":null,"code":"import _regeneratorRuntime from \"/home/devugees/Desktop/react/react_users_sql_1.2.0/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/devugees/Desktop/react/react_users_sql_1.2.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/devugees/Desktop/react/react_users_sql_1.2.0/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/devugees/Desktop/react/react_users_sql_1.2.0/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devugees/Desktop/react/react_users_sql_1.2.0/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devugees/Desktop/react/react_users_sql_1.2.0/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devugees/Desktop/react/react_users_sql_1.2.0/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devugees/Desktop/react/react_users_sql_1.2.0/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devugees/Desktop/react/react_users_sql_1.2.0/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios'; // Use of the bootstrap for the better style of all components\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Header from './layouts/Header';\nimport Users from './components/Users';\nimport UserDetails from './components/UserDetails';\nimport AddUser from './components/AddUser';\nimport EditUser from './components/EditUser'; // import testComp from './components/testComp';\n\nimport Information from './pages/Information';\nimport About from './pages/About';\nimport NotFound from './NotFound';\nimport SuccessLogin from './components/UserLog/SuccessLogin';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n/**\n * The main component where everything is connected.\n *\n * The components are connected with the use of \"Switch\" and \"Router\".\n * There is a component created as a navigation bar anyone can see the\n * different pages. This component is named \"Header\" and has the links\n * to the other pages. It also has a specific link for the logout option.\n * This gives the advantage of loading the different information without\n * having to reload the page, even though the persons sees it like pages\n * are being loaded.\n *\n * Describing the other components:\n *  - The \"Users\" component shows the name of the users store on the database.\n *  - The \"UserDetails\" component shows all the information about a specific user.\n *    This component is only loaded by the Users component. This component also\n *    receives the id of the specified user.\n *  - The \"EditUser\" gives the possibility of changing the current information of\n *    the user. This component also receives the id of the specified user.\n *  - The \"AddUser\" deals with the creation of a new user.\n *  - The \"About\" component only shows some information about the application.\n *\n * At the beginning we see a login page. If the inserted username and password are\n * correct, then the we will see the list of names of the users. If we want to\n * more information, we can select the name of the specific user. We can also\n * delete a user by pressing the button located at the right side of each name.\n *\n * If we see the complete information of a user (after the selected name), we also\n * can edit that information by pressing the button on the right side of all other\n * information. After the changes have been made, we can select save, so the\n * updated information is sent to the server.\n *\n * If we want to add a new user, we must select the \"Add\" link located on the\n * right side of the navigation bar (after \"Home\" link). All the fields need to\n * be filled. After that we can select the \"Add Contact\" button, so the new user\n * is sent to the server.\n *\n * If we want to logout, we just need to select the \"Logout\" link located on the\n * right side of the navigation bar (last link).\n *\n *\n */\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      username: '',\n      password: '',\n      token: '',\n      error1: '',\n      error2: '',\n      dropdownOpen: false // Special for the help menu on the \"Header\" component\n\n    };\n\n    _this.updateInput = function (event) {\n      event.preventDefault(); // Prevents page from reload\n      // if (!element.empty && element.complete)\n\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.loginWithEnterKeyCode =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(event.code === 13)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return axios('http://localhost:1024/login', {\n                  method: 'post',\n                  data: {\n                    username: _this.state.username,\n                    password: _this.state.password\n                  },\n                  withCredentials: true\n                });\n\n              case 3:\n                result = _context.sent;\n\n                if (result.data.error === 0) {\n                  alert('Login successful');\n                  localStorage.setItem('token', result.data.token);\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.login =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return axios('http://localhost:1024/login', {\n                method: 'post',\n                // The username and password to be sent\n                data: {\n                  username: _this.state.username,\n                  password: _this.state.password\n                },\n                // Credentials option\n                withCredentials: true\n              });\n\n            case 2:\n              result = _context2.sent;\n\n              if (result.data.error === 0) {\n                // alert('Login successful');\n                _this.history.push('/loggedin');\n\n                localStorage.setItem('token', result.data.token);\n\n                _this.setState({\n                  token: localStorage.getItem('token')\n                });\n              } else {\n                // If there username or password are missing, errors come\n                if (result.data.code === 10001) _this.setState({\n                  error1: result.data.message\n                });else {\n                  _this.setState({\n                    error2: result.data.message\n                  });\n                }\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.logout =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var token, result;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              token = localStorage.getItem('token');\n              _context3.next = 4;\n              return axios('http://localhost:1024/logout', {\n                method: 'post',\n                headers: {\n                  Authorization: 'Bearer ' + token\n                }\n              });\n\n            case 4:\n              result = _context3.sent;\n\n              if (result.data.error === 0) {\n                alert(result.data.message);\n\n                _this.setState({\n                  token: '',\n                  error1: '',\n                  error2: ''\n                });\n              }\n\n              _context3.next = 11;\n              break;\n\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](0);\n              alert(_context3.t0);\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this, [[0, 8]]);\n    }));\n\n    _this.updateInputHandler = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"toggleDpMenu\",\n    // This function switches the value for the dropdown help menu\n    value: function toggleDpMenu() {\n      this.setState(function (prevState) {\n        return {\n          dropdownOpen: !prevState.dropdownOpen\n        };\n      });\n    } // This function\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, this.state.token === '' ? React.createElement(\"div\", {\n        className: \"App-login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"Users - JWT and MySQL\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Username:\", ' ', React.createElement(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        className: \"form-control\",\n        onChange: this.updateInput // Each written character is store on the specific object in state\n        // onKeyPress={this.loginByEnterKey}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }), this.state.error1 && React.createElement(\"div\", {\n        className: \"invalid-feedback d-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, this.state.error1), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }), \"Password:\", ' ', React.createElement(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        className: \"form-control\",\n        onChange: this.updateInput // Each written character is store on the specific object in state\n        // onKeyPress={this.loginByEnterKey}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }), this.state.error2 && React.createElement(\"div\", {\n        className: \"invalid-feedback d-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, this.state.error2)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"Login\")) :\n      /**\n       * When the login is made, this is the div to be shown.\n       */\n      React.createElement(\"div\", {\n        className: \"App container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(Header, {\n        title: \"Users\",\n        logoutHandler: this.logout,\n        openVal: this.state.dropdownOpen,\n        dropdownHandler: function dropdownHandler() {\n          return _this2.toggleDpMenu();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        component: Users,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/loggedin\",\n        component: SuccessLogin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/userdetails/:id\",\n        component: UserDetails,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/edituser/:id\",\n        component: EditUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/adduser\",\n        component: AddUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/information\",\n        component: Information,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/about\",\n        component: About,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }), React.createElement(Route, {\n        component: NotFound,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/devugees/Desktop/react/react_users_sql_1.2.0/src/App.js"],"names":["React","Component","axios","Header","Users","UserDetails","AddUser","EditUser","Information","About","NotFound","SuccessLogin","BrowserRouter","Router","Route","Switch","App","state","username","password","token","error1","error2","dropdownOpen","updateInput","event","preventDefault","setState","target","name","value","loginWithEnterKeyCode","code","method","data","withCredentials","result","error","alert","localStorage","setItem","login","history","push","getItem","message","logout","headers","Authorization","updateInputHandler","prevState","toggleDpMenu"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n// Use of the bootstrap for the better style of all components\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Header from './layouts/Header';\n\nimport Users from './components/Users';\nimport UserDetails from './components/UserDetails';\nimport AddUser from './components/AddUser';\nimport EditUser from './components/EditUser';\n// import testComp from './components/testComp';\n\nimport Information from './pages/Information';\nimport About from './pages/About';\nimport NotFound from './NotFound';\n\nimport SuccessLogin from './components/UserLog/SuccessLogin';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n/**\n * The main component where everything is connected.\n *\n * The components are connected with the use of \"Switch\" and \"Router\".\n * There is a component created as a navigation bar anyone can see the\n * different pages. This component is named \"Header\" and has the links\n * to the other pages. It also has a specific link for the logout option.\n * This gives the advantage of loading the different information without\n * having to reload the page, even though the persons sees it like pages\n * are being loaded.\n *\n * Describing the other components:\n *  - The \"Users\" component shows the name of the users store on the database.\n *  - The \"UserDetails\" component shows all the information about a specific user.\n *    This component is only loaded by the Users component. This component also\n *    receives the id of the specified user.\n *  - The \"EditUser\" gives the possibility of changing the current information of\n *    the user. This component also receives the id of the specified user.\n *  - The \"AddUser\" deals with the creation of a new user.\n *  - The \"About\" component only shows some information about the application.\n *\n * At the beginning we see a login page. If the inserted username and password are\n * correct, then the we will see the list of names of the users. If we want to\n * more information, we can select the name of the specific user. We can also\n * delete a user by pressing the button located at the right side of each name.\n *\n * If we see the complete information of a user (after the selected name), we also\n * can edit that information by pressing the button on the right side of all other\n * information. After the changes have been made, we can select save, so the\n * updated information is sent to the server.\n *\n * If we want to add a new user, we must select the \"Add\" link located on the\n * right side of the navigation bar (after \"Home\" link). All the fields need to\n * be filled. After that we can select the \"Add Contact\" button, so the new user\n * is sent to the server.\n *\n * If we want to logout, we just need to select the \"Logout\" link located on the\n * right side of the navigation bar (last link).\n *\n *\n */\nclass App extends Component {\n  state = {\n    username: '',\n    password: '',\n    token: '',\n    error1: '',\n    error2: '',\n    dropdownOpen: false // Special for the help menu on the \"Header\" component\n  };\n\n  // This function switches the value for the dropdown help menu\n  toggleDpMenu() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  // This function\n  updateInput = event => {\n    event.preventDefault(); // Prevents page from reload\n    // if (!element.empty && element.complete)\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  /* This function doesn't work. */\n  loginWithEnterKeyCode = async event => {\n    if (event.code === 13) {\n      const result = await axios('http://localhost:1024/login', {\n        method: 'post',\n        data: {\n          username: this.state.username,\n          password: this.state.password\n        },\n        withCredentials: true\n      });\n\n      if (result.data.error === 0) {\n        alert('Login successful');\n\n        localStorage.setItem('token', result.data.token);\n      }\n    }\n  };\n\n  /**\n   * This function deals with the user login. It sends a request to the server\n   * with the username and password inserted. If both match an existent account,\n   * the server sends back a response with a token. This token is store on the\n   * localStorage and on the object here from state. Then it's possible to see\n   * all the other information.\n   */\n  login = async () => {\n    const result = await axios('http://localhost:1024/login', {\n      method: 'post',\n      // The username and password to be sent\n      data: {\n        username: this.state.username,\n        password: this.state.password\n      },\n      // Credentials option\n      withCredentials: true\n    });\n\n    if (result.data.error === 0) {\n      // alert('Login successful');\n      this.history.push('/loggedin');\n\n      localStorage.setItem('token', result.data.token);\n      this.setState({\n        token: localStorage.getItem('token')\n      });\n    } else {\n      // If there username or password are missing, errors come\n      if (result.data.code === 10001)\n        this.setState({\n          error1: result.data.message\n        });\n      else {\n        this.setState({\n          error2: result.data.message\n        });\n      }\n    }\n  };\n\n  /** This function makes the logout. it sends a logout request with the right\n   * associated token. If everything goes well, the response comes with error\n   * code \"0\", then all the objects on state are reset to its initial values.\n   */\n  logout = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const result = await axios('http://localhost:1024/logout', {\n        method: 'post',\n        headers: {\n          Authorization: 'Bearer ' + token\n        }\n      });\n      if (result.data.error === 0) {\n        alert(result.data.message);\n        this.setState({\n          token: '',\n          error1: '',\n          error2: ''\n        });\n      }\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  /* This function stores what the user writes in the input field.\n     For each input field, the information is store on the object of the\n     \"state\". This is done by the corresponding identification. That's why\n     every input field has the \"name\" tag. The value of this tag must match\n     the same name of the object belongin to \"state\". That way the value of the\n     input is stored character by character.\n  */\n  updateInputHandler = event => {\n    this.setState({\n      // While the first matches the specific object on state,\n      // the second one assigns the value to the object.\n      [event.target.name]: event.target.value\n    });\n  };\n  render() {\n    return (\n      <Router>\n        {/* Here the most important condition. If the object \"token\" initially is empty, than only the login screen is shown. Otherwise the information about the registered users is shown as well as all available options.*/}\n        {this.state.token === '' ? (\n          <div className=\"App-login\">\n            <h1>Users - JWT and MySQL</h1>\n            <div>\n              Username:{' '}\n              <input\n                type=\"text\"\n                name=\"username\"\n                className=\"form-control\"\n                onChange={this.updateInput} // Each written character is store on the specific object in state\n                // onKeyPress={this.loginByEnterKey}\n              />\n              {/* If there are errors to be shown... */}\n              {this.state.error1 && (\n                <div className=\"invalid-feedback d-block\">\n                  {this.state.error1}\n                </div>\n              )}\n              <br />\n              Password:{' '}\n              <input\n                type=\"password\"\n                name=\"password\"\n                className=\"form-control\"\n                onChange={this.updateInput} // Each written character is store on the specific object in state\n                // onKeyPress={this.loginByEnterKey}\n              />\n              {/* If there are errors to be shown... */}\n              {this.state.error2 && (\n                <div className=\"invalid-feedback d-block\">\n                  {this.state.error2}\n                </div>\n              )}\n            </div>\n            <br />\n            <br />\n            {/* This is the button that calls the login function. */}\n            <button className=\"btn btn-primary\" onClick={this.login}>\n              Login\n            </button>\n          </div>\n        ) : (\n          /**\n           * When the login is made, this is the div to be shown.\n           */\n          <div className=\"App container\">\n            <Header\n              title=\"Users\"\n              logoutHandler={this.logout}\n              openVal={this.state.dropdownOpen}\n              dropdownHandler={() => this.toggleDpMenu()}\n            />\n            <Switch>\n              <Route exact path=\"/\" component={Users} />\n              <Route exact path=\"/loggedin\" component={SuccessLogin} />\n              <Route exact path=\"/userdetails/:id\" component={UserDetails} />\n              <Route exact path=\"/edituser/:id\" component={EditUser} />\n              <Route exact path=\"/adduser\" component={AddUser} />\n              <Route exact path=\"/information\" component={Information} />\n              <Route exact path=\"/about\" component={About} />\n              <Route component={NotFound} />\n            </Switch>\n            {/* \n            Commented button. Not needed anymore.\n            <button onClick={this.logout}>Logout</button> */}\n          </div>\n        )}\n      </Router>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
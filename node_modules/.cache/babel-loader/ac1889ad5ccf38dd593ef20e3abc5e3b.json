{"ast":null,"code":"import _regeneratorRuntime from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devugees/Desktop/react/react_users_sql_1.3.1/src/components/UserLog/Login.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios'; // Use of the bootstrap for the better style of all components\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../App.css'; // Component needed when the user makes a successful login\n\nimport SuccessLogin from './SuccessLogin';\n/**\n * This component deals with the user login.\n * If the credentials were correctly inserted,\n * the user is redirected to the page confirming\n * that the login was successful.\n */\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n\n    _this.updateInput = function (event) {\n      event.preventDefault(); // Prevents page from reload\n      // if (!element.empty && element.complete)\n\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.login =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios('http://localhost:1024/login', {\n                method: 'post',\n                // The username and password to be sent\n                data: {\n                  username: _this.state.username,\n                  password: _this.state.password\n                },\n                // Credentials option\n                withCredentials: true\n              });\n\n            case 2:\n              result = _context.sent;\n\n              if (result.data.error === 0) {\n                // alert('Login successful');\n                localStorage.setItem('token', result.data.token);\n\n                _this.setState({\n                  token: localStorage.getItem('token'),\n                  showSuccess: true\n                }); // Updating the token from\n                // the parent component\n                // this.props.history.push('/'); // Keeping the home page link so it goes to the home component\n\n              } else {\n                // If there username or password are missing, errors come\n                if (result.data.code === 10001) _this.setState({\n                  error1: result.data.message\n                });else {\n                  _this.setState({\n                    error2: result.data.message\n                  });\n                }\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.updateUserToken = function () {\n      // this.timeStatus = setTimeout(() => {}, 5000);\n      _this.setState({\n        showSuccess: false\n      });\n\n      _this.props.changeStatus(_this.state.token);\n    };\n\n    _this.state = {\n      error1: '',\n      error2: '',\n      token: '',\n      showSuccess: false\n    };\n    return _this;\n  }\n  /**\n   * This function updates the username or the password.\n   * This is done character by character every time the user\n   * writes anything on the input fields of the form.\n   */\n\n\n  _createClass(Login, [{\n    key: \"componentWillUnmount\",\n    // Clearing the timeout when this component unmounts, then it's riderected\n    // to the homepage where is the list of users\n    value: function () {\n      var _componentWillUnmount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                clearTimeout(this.timeStatus); // this.props.history.push('/'); // Keeping the home page link (so it goes to App.js)\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function componentWillUnmount() {\n        return _componentWillUnmount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.state.showSuccess === false ? React.createElement(\"div\", {\n        className: \"App-login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Users - JWT and MySQL\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Username:\", ' ', React.createElement(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        className: \"form-control\",\n        onChange: this.updateInput // Each written character is store on the specific object in state\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), this.state.error1 && React.createElement(\"div\", {\n        className: \"invalid-feedback d-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, this.state.error1), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), \"Password:\", ' ', React.createElement(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        className: \"form-control\",\n        onChange: this.updateInput // Each written character is store on the specific object in state\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), this.state.error2 && React.createElement(\"div\", {\n        className: \"invalid-feedback d-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, this.state.error2)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Login\")) : React.createElement(SuccessLogin, {\n        updateHandler: this.updateUserToken,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport default Login;","map":{"version":3,"sources":["/home/devugees/Desktop/react/react_users_sql_1.3.1/src/components/UserLog/Login.js"],"names":["React","Component","axios","SuccessLogin","Login","props","updateInput","event","preventDefault","setState","target","name","value","login","method","data","username","state","password","withCredentials","result","error","localStorage","setItem","token","getItem","showSuccess","code","error1","message","error2","updateUserToken","changeStatus","clearTimeout","timeStatus"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n// Use of the bootstrap for the better style of all components\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../App.css';\n\n// Component needed when the user makes a successful login\nimport SuccessLogin from './SuccessLogin';\n\n/**\n * This component deals with the user login.\n * If the credentials were correctly inserted,\n * the user is redirected to the page confirming\n * that the login was successful.\n */\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { error1: '', error2: '', token: '', showSuccess: false };\n  }\n  /**\n   * This function updates the username or the password.\n   * This is done character by character every time the user\n   * writes anything on the input fields of the form.\n   */\n  updateInput = event => {\n    event.preventDefault(); // Prevents page from reload\n    // if (!element.empty && element.complete)\n    this.setState({\n      // While the first matches the specific object on state,\n      // the second one assigns the value to the object.\n      [event.target.name]: event.target.value\n    });\n  };\n\n  /**\n   * This function deals with the user login. It sends a request to the server\n   * with the username and password inserted. If both match an existent account,\n   * the server sends back a response with a token. This token is store on the\n   * localStorage and on the object here from state. Then it's possible to see\n   * all the other information.\n   */\n  login = async () => {\n    const result = await axios('http://localhost:1024/login', {\n      method: 'post',\n      // The username and password to be sent\n      data: {\n        username: this.state.username,\n        password: this.state.password\n      },\n      // Credentials option\n      withCredentials: true\n    });\n\n    if (result.data.error === 0) {\n      // alert('Login successful');\n\n      localStorage.setItem('token', result.data.token);\n      this.setState({\n        token: localStorage.getItem('token'),\n        showSuccess: true\n      });\n      // Updating the token from\n      // the parent component\n\n      // this.props.history.push('/'); // Keeping the home page link so it goes to the home component\n    } else {\n      // If there username or password are missing, errors come\n      if (result.data.code === 10001)\n        this.setState({\n          error1: result.data.message\n        });\n      else {\n        this.setState({\n          error2: result.data.message\n        });\n      }\n    }\n  };\n\n  /**\n   * This function will call the function from the parent\n   * component to update the token with the value of the\n   * token store here.\n   * It has a timeout. This is to give the possibility\n   * for the user to first see the information\n   * about the successful login. When the timeout is triggered,\n   * the showSuccess is set to false. This way the \"SuccessLogin\"\n   * component gets hidden again.\n   */\n  updateUserToken = () => {\n    // this.timeStatus = setTimeout(() => {}, 5000);\n    this.setState({\n      showSuccess: false\n    });\n    this.props.changeStatus(this.state.token);\n  };\n\n  // Clearing the timeout when this component unmounts, then it's riderected\n  // to the homepage where is the list of users\n  async componentWillUnmount() {\n    clearTimeout(this.timeStatus);\n    // this.props.history.push('/'); // Keeping the home page link (so it goes to App.js)\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.showSuccess === false ? (\n          <div className=\"App-login\">\n            <h1>Users - JWT and MySQL</h1>\n            <div>\n              Username:{' '}\n              <input\n                type=\"text\"\n                name=\"username\"\n                className=\"form-control\"\n                onChange={this.updateInput} // Each written character is store on the specific object in state\n              />\n              {/* If there are errors to be shown... */}\n              {this.state.error1 && (\n                <div className=\"invalid-feedback d-block\">\n                  {this.state.error1}\n                </div>\n              )}\n              <br />\n              Password:{' '}\n              <input\n                type=\"password\"\n                name=\"password\"\n                className=\"form-control\"\n                onChange={this.updateInput} // Each written character is store on the specific object in state\n              />\n              {/* If there are errors to be shown... */}\n              {this.state.error2 && (\n                <div className=\"invalid-feedback d-block\">\n                  {this.state.error2}\n                </div>\n              )}\n            </div>\n            <br />\n            <br />\n            {/* This is the button that calls the login function. */}\n            <button className=\"btn btn-primary\" onClick={this.login}>\n              Login\n            </button>\n          </div>\n        ) : (\n          <SuccessLogin updateHandler={this.updateUserToken} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}
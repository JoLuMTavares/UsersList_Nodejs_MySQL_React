{"ast":null,"code":"import _regeneratorRuntime from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devugees/Desktop/react/react_users_sql_1.3.1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devugees/Desktop/react/react_users_sql_1.3.1/src/components/EditUser.js\";\nimport React, { Component } from 'react'; // JSX\n\nimport TextInputGroup from '../layouts/TextInputGroup';\nimport Axios from 'axios';\n/* Stateful component that has the similar behavior as the \"AddUser\". \n  The difference is that here it gets the user id from its parent component\n  via Routing.\n\n  After that comes the most important. Every component, when called, always tries\n  to render before any other execution (except the constructor). With this, if the\n  needed information is not yet stored, errors will come out, since there's nothing to be shown. \n\n  To avoid this, it's important to program a prevention. The component won't try\n  to show anything then unless the information is completely loaded.\n  \n*/\n\nvar EditContact =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditContact, _Component);\n\n  // Constructor where the object is initialized with no value\n  function EditContact() {\n    var _this;\n\n    _classCallCheck(this, EditContact);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditContact).call(this));\n\n    _this.updateInformation = function (event) {\n      event.preventDefault(); // Prevents page from reload\n\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.handleContact = function () {\n      // The id from the parent component\n      var id = _this.props.match.params.id; // Assigning the objects of the state to this set of objects\n\n      var _this$state = _this.state,\n          name = _this$state.name,\n          email = _this$state.email,\n          city = _this$state.city,\n          phone = _this$state.phone,\n          website = _this$state.website; // Test to make shore no object (that is going to be sent to the server) is empty\n\n      if (name === ' ') {\n        _this.setState({\n          errors: {\n            name: 'Name is required'\n          }\n        });\n\n        return;\n      }\n\n      if (email === ' ') {\n        _this.setState({\n          errors: {\n            email: 'Email is required'\n          }\n        });\n\n        return;\n      }\n\n      if (city === ' ') {\n        _this.setState({\n          errors: {\n            city: 'City is required'\n          }\n        });\n\n        return;\n      }\n\n      if (phone === ' ') {\n        _this.setState({\n          errors: {\n            phone: 'Phone is required'\n          }\n        });\n\n        return;\n      }\n\n      if (website === ' ') {\n        _this.setState({\n          errors: {\n            website: 'Please write a website'\n          }\n        });\n\n        return;\n      } // Creation of an object with the name \"Person\"\n\n\n      var Person = {\n        name: name,\n        email: email,\n        city: city,\n        phone: phone,\n        website: website,\n        id: id,\n        errors: {}\n      };\n\n      try {\n        // This is where the request is made. It's a post request, since the\n        // information has to be store on the database.\n        Axios.put(\"http://localhost:1024/userUpdate\", Person).then(function (response) {\n          // If the operation was successful, the alert is shown to the user\n          alert('User successfully updated.');\n\n          _this.props.history.push('/'); // Keeping the home page link so it goes to the home component\n\n        });\n      } catch (error) {\n        console.log('error = ' + error);\n      }\n    };\n\n    _this.state = {\n      user: ''\n    };\n    return _this;\n  } // Getting the right user from the database once again\n\n\n  _createClass(EditContact, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // With the given id, it sends a request to the server. The response\n                // will be an array with different elements, but only the object on\n                // the first position - [0] - is needed.\n                try {\n                  Axios.get('http://localhost:1024/user?id=' + this.props.match.params.id).then(function (response) {\n                    _this2.setState({\n                      // Storing the object on the one initialized in the constructor\n                      user: response.data[0]\n                    });\n                  });\n                } catch (error) {\n                  console.log('error = ' + error);\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n    /* This function stores what the user writes in the input field.\n       For each input field, the information is store on the object of the\n       \"state\". This is done by the corresponding identification. That's why\n       every input field has the \"name\" tag. The value of this tag must match\n       the same name of the object belonging to \"state\". That way the value of the\n       input is stored character by character.\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, this.state.user ? React.createElement(\"div\", {\n        className: \"Edit-Contact-Form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(TextInputGroup, {\n        type: \"text\",\n        label: \"Name\",\n        className: \"name form-control\",\n        name: \"name\" // This is value that must match the identification of the object store in state.\n        ,\n        defaultValue: this.state.user.name // Current information retrieved from the user store on the database\n        ,\n        placeholder: \"Enter name\",\n        onChange: this.updateInformation // This calls the function that stores what the user writes on the object store in state.\n        // error={this.state.errors.name}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(TextInputGroup, {\n        type: \"email\",\n        label: \"Email\",\n        className: \"email form-control\",\n        name: \"email\" // This is value that must macth the identification of the object store in state.\n        ,\n        defaultValue: this.state.user.email // Current information retrieved from the user store on the database\n        ,\n        placeholder: \"Enter email\",\n        onChange: this.updateInformation // This calls the function that stores what the user writes on the object store in state.\n        // error={this.state.errors.email}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(TextInputGroup, {\n        type: \"text\",\n        label: \"City\",\n        className: \"city form-control\",\n        name: \"city\" // This is value that must macth the identification of the object store in state.\n        ,\n        defaultValue: this.state.user.city // Current information retrieved from the user store on the database\n        ,\n        placeholder: \"Enter city name\",\n        onChange: this.updateInformation // This calls the function that stores what the user writes on the object store in state.\n        // error={this.state.errors.city}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), React.createElement(TextInputGroup, {\n        type: \"text\",\n        label: \"Phone\",\n        className: \"phone form-control\",\n        name: \"phone\" // This is value that must macth the identification of the object store in state.\n        ,\n        defaultValue: this.state.user.phone // Current information retrieved from the user store on the database\n        ,\n        placeholder: \"Enter phone\",\n        onChange: this.updateInformation // This calls the function that stores what the user writes on the object store in state.\n        // error={this.state.errors.phone}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(TextInputGroup, {\n        type: \"text\",\n        label: \"Website\",\n        className: \"website form-control\",\n        name: \"website\" // This is value that must macth the identification of the object store in state.\n        ,\n        defaultValue: this.state.user.website // Current information retrieved from the user store on the database\n        ,\n        placeholder: \"Enter website\",\n        onChange: this.updateInformation // This calls the function that stores what the user writes on the object store in state.\n        // error={this.state.errors.website}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), ' ', React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        onClick: function onClick() {\n          return _this3.handleContact();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Save\", ' ')) : null);\n    }\n  }]);\n\n  return EditContact;\n}(Component);\n\nexport { EditContact as default };","map":{"version":3,"sources":["/home/devugees/Desktop/react/react_users_sql_1.3.1/src/components/EditUser.js"],"names":["React","Component","TextInputGroup","Axios","EditContact","updateInformation","event","preventDefault","setState","target","name","value","handleContact","id","props","match","params","state","email","city","phone","website","errors","Person","put","then","response","alert","history","push","error","console","log","user","get","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n// JSX\n\nimport TextInputGroup from '../layouts/TextInputGroup';\nimport Axios from 'axios';\n\n/* Stateful component that has the similar behavior as the \"AddUser\". \n  The difference is that here it gets the user id from its parent component\n  via Routing.\n\n  After that comes the most important. Every component, when called, always tries\n  to render before any other execution (except the constructor). With this, if the\n  needed information is not yet stored, errors will come out, since there's nothing to be shown. \n\n  To avoid this, it's important to program a prevention. The component won't try\n  to show anything then unless the information is completely loaded.\n  \n*/\n\nexport default class EditContact extends Component {\n  // Constructor where the object is initialized with no value\n  constructor() {\n    super();\n    this.state = { user: '' };\n  }\n\n  // Getting the right user from the database once again\n  async componentDidMount() {\n    // With the given id, it sends a request to the server. The response\n    // will be an array with different elements, but only the object on\n    // the first position - [0] - is needed.\n    try {\n      Axios.get(\n        'http://localhost:1024/user?id=' + this.props.match.params.id\n      ).then(response => {\n        this.setState({\n          // Storing the object on the one initialized in the constructor\n          user: response.data[0]\n        });\n      });\n    } catch (error) {\n      console.log('error = ' + error);\n    }\n  }\n\n  /* This function stores what the user writes in the input field.\n     For each input field, the information is store on the object of the\n     \"state\". This is done by the corresponding identification. That's why\n     every input field has the \"name\" tag. The value of this tag must match\n     the same name of the object belonging to \"state\". That way the value of the\n     input is stored character by character.\n  */\n  updateInformation = event => {\n    event.preventDefault(); // Prevents page from reload\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  // This function handles the update of the current user (on the front end side).\n  // It works on a similar way as the function on \"handleNewContact\" \"AddUser\" component\n  handleContact = () => {\n    // The id from the parent component\n    const { id } = this.props.match.params;\n\n    // Assigning the objects of the state to this set of objects\n    const { name, email, city, phone, website } = this.state;\n\n    // Test to make shore no object (that is going to be sent to the server) is empty\n    if (name === ' ') {\n      this.setState({\n        errors: { name: 'Name is required' }\n      });\n      return;\n    }\n    if (email === ' ') {\n      this.setState({\n        errors: { email: 'Email is required' }\n      });\n      return;\n    }\n    if (city === ' ') {\n      this.setState({\n        errors: { city: 'City is required' }\n      });\n      return;\n    }\n    if (phone === ' ') {\n      this.setState({\n        errors: { phone: 'Phone is required' }\n      });\n      return;\n    }\n    if (website === ' ') {\n      this.setState({\n        errors: { website: 'Please write a website' }\n      });\n      return;\n    }\n    // Creation of an object with the name \"Person\"\n    const Person = {\n      name: name,\n      email: email,\n      city: city,\n      phone: phone,\n      website: website,\n      id: id,\n      errors: {}\n    };\n    try {\n      // This is where the request is made. It's a post request, since the\n      // information has to be store on the database.\n      Axios.put(`http://localhost:1024/userUpdate`, Person).then(response => {\n        // If the operation was successful, the alert is shown to the user\n        alert('User successfully updated.');\n        this.props.history.push('/'); // Keeping the home page link so it goes to the home component\n      });\n    } catch (error) {\n      console.log('error = ' + error);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        {/* The great difference. As mentioned on the beginning, the object is here evaluated. If it does not exist or does not contain any information yet, nothing will be shown. Otherwise, this div is shown with the current user information. */}\n        {this.state.user ? (\n          <div className=\"Edit-Contact-Form\">\n            <TextInputGroup\n              type=\"text\"\n              label=\"Name\"\n              className=\"name form-control\"\n              name=\"name\" // This is value that must match the identification of the object store in state.\n              defaultValue={this.state.user.name} // Current information retrieved from the user store on the database\n              placeholder=\"Enter name\"\n              onChange={this.updateInformation} // This calls the function that stores what the user writes on the object store in state.\n              // error={this.state.errors.name}\n            />\n            <TextInputGroup\n              type=\"email\"\n              label=\"Email\"\n              className=\"email form-control\"\n              name=\"email\" // This is value that must macth the identification of the object store in state.\n              defaultValue={this.state.user.email} // Current information retrieved from the user store on the database\n              placeholder=\"Enter email\"\n              onChange={this.updateInformation} // This calls the function that stores what the user writes on the object store in state.\n              // error={this.state.errors.email}\n            />\n            <TextInputGroup\n              type=\"text\"\n              label=\"City\"\n              className=\"city form-control\"\n              name=\"city\" // This is value that must macth the identification of the object store in state.\n              defaultValue={this.state.user.city} // Current information retrieved from the user store on the database\n              placeholder=\"Enter city name\"\n              onChange={this.updateInformation} // This calls the function that stores what the user writes on the object store in state.\n              // error={this.state.errors.city}\n            />\n            <TextInputGroup\n              type=\"text\"\n              label=\"Phone\"\n              className=\"phone form-control\"\n              name=\"phone\" // This is value that must macth the identification of the object store in state.\n              defaultValue={this.state.user.phone} // Current information retrieved from the user store on the database\n              placeholder=\"Enter phone\"\n              onChange={this.updateInformation} // This calls the function that stores what the user writes on the object store in state.\n              // error={this.state.errors.phone}\n            />\n            <TextInputGroup\n              type=\"text\"\n              label=\"Website\"\n              className=\"website form-control\"\n              name=\"website\" // This is value that must macth the identification of the object store in state.\n              defaultValue={this.state.user.website} // Current information retrieved from the user store on the database\n              placeholder=\"Enter website\"\n              onChange={this.updateInformation} // This calls the function that stores what the user writes on the object store in state.\n              // error={this.state.errors.website}\n            />{' '}\n            {/* This button call the function to handle the user update.\n                The two ways to do this are with the use of bind (as \"this.handleContact.bind()\") or by the use of arrow function\n                like it is written bellow.\n            */}\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              onClick={() => this.handleContact()}\n            >\n              Save{' '}\n            </button>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}